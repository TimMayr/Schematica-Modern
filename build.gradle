buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "https://files.minecraftforge.net/maven"
		}
		maven {
			name = 'sonatype'
			url = 'https://oss.sonatype.org/content/repositories/snapshots/'
		}
	}
}

plugins {
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

def modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}"

def fullyQualifiedForgeVersion = "${project.version_minecraft}-${project.version_forge}"
version = "${project.version_minecraft}-${modversion}"

repositories {
	maven {
		url = "https://files.minecraftforge.net/maven"
	}
	flatDir {
		dirs 'libs'
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${fullyQualifiedForgeVersion}"

	implementation fg.deobf("${group}.core:LunatriusCore:${version_minecraft}-${version_lunatriuscore}")
}

minecraft {
	mappings channel: "${mapping_channel}", version: "${mapping_version}"
	accessTransformer = file 'src/main/resources/META-INF/accesstransformer.cfg'

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}

		Server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			args '--mod', 'lunatriuscore', '--all', '--output', file('src/generated/resources/')

			mods {
				lunatriuscore {
					source sourceSets.main
				}
			}
		}
	}
}

processResources {
	// This will ensure that this task is redone when the versions change.
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	inputs.properties(version: modversion, mcversion: version_minecraft, forgeversion: forgeversion, modid: id, modname: modname)

	// Replace stuff in mods.toml, nothing else
	filesMatching('META-INF/mods.toml') { // Replace with your files
		expand([modversion           : modversion,
		        mcversion            : version_minecraft,
		        forgeversion         : forgeversion,
		        modid                : id,
		        modname: modname,
		        version_lunatriuscore: version_lunatriuscore])
	}

	// Copy everything else except the mods.toml
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'
	}
}

def processReferenceJava = tasks.register('processReferenceJava', Copy) {
	from 'src/main/java/com/github/lunatrius/schematica/reference'
	into "$buildDir/generated/sources/reference"

	include 'Reference.java' // Target only Reference.java
	expand([modversion           : modversion,
	        version_minecraft: version_minecraft,
	        version_forge        : version_forge,
	        modid                : id,
	        modname              : modname,
	        version_lunatriuscore: version_lunatriuscore])
}

// Ensure Reference.java is included in compilation along with other sources
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', "$buildDir/generated/sources/reference"]
			exclude 'com/github/lunatrius/schematica/reference/Reference.java'
		}
	}
	api {
		java {
			srcDirs = ['src/api/java']
		}
		compileClasspath += configurations.minecraft
		runtimeClasspath += configurations.minecraft
	}
}

sourceSets.main {
	compileClasspath += sourceSets.api.output
	runtimeClasspath += sourceSets.api.output
}

tasks.compileJava {
	dependsOn processReferenceJava // Ensure substitution happens before compilation
}

def commonManifest = {
	if (project.hasProperty('extra_fmlat')) {
		attributes 'FMLAT': project.extra_fmlat
	}
}

jar {
	manifest {
		attributes(["Specification-Title"     : project.name,
		            "Specification-Vendor"    : project.group,
		            "Specification-Version"   : version,
		            "Implementation-Title"    : project.name,
		            "Implementation-Version"  : version,
		            "Implementation-Vendor"   : project.group,
		            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
		            "Signing-Fingerprint"     : project.hasProperty('signSHA1') ? project.findProperty('signSHA1') : "unsigned"])
	}
}

jar {
	from sourceSets.api.output
	archiveClassifier = project.hasProperty('extra_classifier') ? project.extra_classifier : 'universal'
	manifest commonManifest
}

tasks.register('sourceJar', Jar) {
	dependsOn classes
	archiveClassifier.set('sources')
	from sourceSets.api.allSource
}

task apiJar(dependsOn: 'classes', type: Jar) {
	from sourceSets.api.output
	archiveClassifier = 'api'
	manifest commonManifest
}

artifacts {
	archives sourceJar
	archives apiJar
}